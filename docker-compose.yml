services:
  query-service:
    build:
      context: ./query-service
      dockerfile: Dockerfile
    deploy:
      replicas: 1
    depends_on:
      rabbitmq:
            condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:8081/actuator/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    networks:
      - app-network

  booking-service:
    build:
      context: ./booking
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "5005:5005"
    deploy:
      replicas: 1
    networks:
      - app-network

  to-scraper:
    build:
      context: ./to-service
      dockerfile: Dockerfile
    deploy:
      replicas: 1
    depends_on:
      rabbitmq:
            condition: service_healthy
      query-service:
            condition: service_healthy
    networks:
      - app-network

  to-import:
    build:
      context: ./to-import
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      replicas: 1
    networks:
      - app-network

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    deploy:
      replicas: 1
    depends_on:
      - query-service
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - "15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - app-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    deploy:
      replicas: 1
    networks:
      - app-network

  booking-event:
    build:
      context: ./booking-event
      dockerfile: Dockerfile
    ports:
      - "8091:8091"
    deploy:
      replicas: 1
    depends_on:
      rabbitmq:
        condition: service_healthy
      booking-service:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

